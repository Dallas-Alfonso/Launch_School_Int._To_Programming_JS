push appends elements to the end of the caller array, but it returns the array's updated length.  NOT THE ACTUAL ARRAY


array
[ 1, 4, 3, 10, 'a', null ]

array.splice(3, 2)    HERE, WE START FROM 3RD COUNT.  FROM  THE 3RD COUNT, WE FINISH WITH SECOND, BUT DONTTTT INCLUDE THE SECOND
[ 10, 'a' ]               RETURN THE DELETED ITEMS

> array
= [ 1, 4, 3, null ]




JavaScript treats two arrays as equal only when they
are the same array: they must occupy the same 
spot in memory.





Slice ( )
The slice( ) method copies a given part of an array 
and returns that copied part as a new array. It doesn’t 
change the original array.

array.slice(from, until);

From: Slice the array starting from an element index
Until: Slice the array until another element index

The slice( ) method doesn’t include the last given element.



Split ( )
Slice( ) and splice( ) methods are 
for arrays. The split( ) method is used 
for strings. It divides a string into 
substrings and returns them as an array. 
It takes 2 parameters, and both are optional.




In the following code, what are the final length values for array1, array2, array3, array4, and array5?


let array1 = [1, 2, undefined, 4];        4

let array2 = [1];                         5
array2.length = 5;

let array3 = [];                          1    0      The length of array3 is 0. Index positions 
array3[-1] = [1];                                     must be non-negative integers starting from 0.                                                                               
                                                      Negative and non-integer indexes don't get taken into account 
let array4 = [1, 2, 3, 4, 5];             3           when determining an array's length. 
array4.length = 3;

let array5 = [];                         100   101  The length of array5 is 101. As already noted, the length 
array5[100] = 3;                                     is the highest index position that has a value, plus 1. In this case, 
                                                    the highest index position that has a value is 100, so the length is 101.

                                                    NOTE THE INDEX + 1 FACT!!!


MAP IS ALMOST THE SAME THING AS FOREACH

The main thing to remember is that forEach performs simple 
iteration and returns undefined, while map transforms an array's 
elements and returns a new array with the transformed values.



let newArray = myArray.map(function(values){
  if (value % 2 === 0) {
    return 'even';
  } else {
    return 'odd';
  }
})