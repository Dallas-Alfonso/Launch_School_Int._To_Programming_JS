'' == 0
= true


5 != '5'
= false


'' != 0
= false


"42" < "402"
= false


"42" > "402"
= true


!(4 !== 4)
= true






List that gives a FALSE evaluations

false
The number 0. This includes all 3 variations of zero in JavaScript:
0: The ordinary zero value.
-0: A negative zero. That's mathematical nonsense, but a real thing in JavaScript.
0n: The BigInt version of zero.
An empty string ('')
undefined
null
NaN





!!3    // 3 is truthy, !3 is false, !false is true
= true

!!''   // '' is falsy, !'' is true, !true is false
= false


PRACTICE THESE CONFUSING CONCEPTS..






Operator Precedence
JavaScript has a set of precedence rules it uses to evaluate expressions that use multiple operators and sub-expressions. The following is a list of the comparison operations from the highest precedence (top) to lowest (bottom).

<=, <, >, >= - Comparison
===, !==, ==, != - Equality
&& - Logical AND
|| - Logical OR






                      The || (or operator) returns the first VALUE that is truthy so 
                      in this case, it would return the value 3, not necessarily 
                      the word ‘true’. At least that's how I understand it

                       false || (true && false);       FALSE        
                       true || (1 + 2);                TRUE  
                       (1 + 2) || true;                TRUE  3


                       The && operation returns the first falsy value or 
                       the last value if no falsy value is found.


                       true && (1 + 2);                TRUE  3
                       false && (1 + 2);               TRUE  false
                       (1 + 2) && true;                TRUE

                       (32 * 4) >= 129;                FALSE
                       false !== !true;                FALSE

                       true === 4;                     TRUE  false
                       false === (847 === '847');      TRUE
                       false === (847 == '847');       FALSE
(!true || (!(100 / 5) === 20) || ((328 / 4) === 82)) || false;    FALSE  true
                20                  82
  false           false               true
                        true

The last expression needs some explanation:

!true is false

!(100 / 5) === 20) is also false because !(100 / 5) is a boolean value, 
and === always returns false when the operands have different types.

((328 / 4) === 82) is true

Put together, items 1-3 combine with || as (false || false || true), which is true.

Using the value from item 4 results in true || false, which is true.





5. 
Refactor this statement to use an if statement instead.

Copy Code
return foo() ? 'bar' : qux();

if (foo()) {
	return 'bar';
} else {
	return qux();
}


 
7.  
Write a function that takes a string as an argument and returns an all-caps version of the string when the string is longer than 10 characters. Otherwise, it should return the original string. Example: change 'hello world' to 'HELLO WORLD', but don't change 'goodbye'.

function takeString (string) {    TAKE MORE CAUTION FOR NAMING THE STRING
	if ( string.length > 10) {
		return string.toUpperCase();
	} else {
		return string;
	}
}



OTHER SOLUTION:

function takeString (string) {
	return((string.length > 10) ? string.toUpperCase() : string);
}








Write a function that logs whether a number is between 0 and 50 (inclusive), between 51 and 100 (inclusive), greater than 100, or less than 0.

Copy Code

numberRange(25);
numberRange(75);
numberRange(125);
numberRange(-25);
Expected Output

Copy Code
25 is between 0 and 50
75 is between 51 and 100
125 is greater than 100
-25 is less than 0


CAN I DO THIS FUNCTION?????
function numberBetween (number) {
	return (number >= 50) ? console.log( ${number} is between 0 and 50 : )
}

ATTEMPT ANSWER

function numberRange (number) {														ELSE CONDITION IS LAST!!!!
	if (number >=0 && number <= 50) {
		console.log(`${number} is between 0 and 50`);
	} else (number >= 51  && number <= 100) {
		console.log(`${number} is between 51 and 100`);
	} else (number >= 101) {
		console.log(`${number} is greater than 100`);
	} else if (number <= 0) {
		console.log(`$(number) is less than 0`)
	}
}

BOOK ANSWER (CORRECT)
function numberRange(number) {
  if (number < 0) {
    console.log(`${number} is less than 0`);
  } else if (number <= 50) {																		from lines 197 to 199.  WE DONT NEED AN "AND" (&&) because is number was below 100 and above 50 (75)  then one of the conditoins will execute it...
    console.log(`${number} is between 0 and 50`);														BUT EVEN IF WE DONT NEED. IT STILL WORKS!!!!
  } else if (number <= 100) {									
    console.log(`${number} is between 50 and 100`);
  } else {																												DO TAKE NOTE THOUGH, THAT THE LAST ELSE has no condition......  IS THIS ALWASYS THE CASE?
    console.log(`${number} is greater than 100`);
  }
}
