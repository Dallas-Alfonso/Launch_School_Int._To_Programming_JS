Modern versions of the standard (ES6+) do guarantee the iteration order for an object's property keys. However, this order is somewhat complex. The order is based on:

the types of the property keys (strings come before symbols)
the values of the keys (non-negative integers come first), and
the order in which the keys were added to the object.

It's tempting to rely on this predictable order, but the order isn't straightforward except in the simplest cases.

In the end, it's not wise to make any assumptions about the iteration order for object property keys. You can't depend on it.





Which of the following values are valid keys for an object?

1                           Correct Answer... ALL OF THEM
'1'               THIS      
undefined
'hello world'     THIS
true
'true'            THIS

JavaScript coerces the non-string key values to strings






Write some code to replace the value 6 in the following object with 606:

Copy Code
let obj = {
  foo: { a: "hello", b: "world" },
  bar: ["example", "mem", null, { xyz: 6 }, 88],
  qux: [4, 8, 12]
};

You don't have to search the object. Just write an assignment that replaces the 6.


obj.bar[3].xyz = 606



most common methods 




Object.keys
The Object.keys static method returns an object's keys as an array. You can iterate over that array using any technique that works for arrays. 

Object.values
This static method extracts the values from every own property in an object to an array:

let person = { name: 'Bob', age: 30, height: '6ft' };
let personValues = Object.values(person);
console.log(personValues); // => [ 'Bob', 30, '6ft' ]

Object.entries
While Object.keys and Object.values return the keys and values of an object, respectively, the Object.entries static method returns an array of nested arrays. Each nested array has two elements: one of the object's keys and its corresponding value:

Copy Code
let person = { name: 'Bob', age: 30, height: '6ft' };
console.log(Object.entries(person)); // => [[ 'name', 'Bob' ], [ 'age', 30 ], [ 'height', '6ft' ]]

Object.assign
You may sometimes want to merge two or more objects, i.e., combine the key-value pairs into a single object. The Object.assign static method provides this functionality:

Copy Code
> let objA = { a: 'foo' }
= undefined

> let objB = { b: 'bar' }
= undefined

> Object.assign(objA, objB)
= { a: 'foo', b: 'bar' }